apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-pds"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.Version }}"
    app.kubernetes.io/component: pds
spec:
  replicas: {{ .Values.pds.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/component: pds
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/component: pds
    spec:
      containers:
        - image: {{ .Values.pds.image.repository }}:{{ .Values.pds.image.tag | default .Chart.AppVersion }}
          name: pds
          resources:
          {{- .Values.pds.resources | toYaml | nindent 12 }}
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-pds-env"
          env:
            - name: PDS_PORT
              value: "{{ .Values.pds.containerPort }}"
            - name: PDS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.pds.secretsName | default (cat .Release.Name "-pds") }}"
                  key: adminPassword
            - name: PDS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.pds.secretsName | default (cat .Release.Name "-pds") }}"
                  key: jwtSecret
            - name: PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.pds.secretsName | default (cat .Release.Name "-pds") }}"
                  key: plcRotationKey
          volumeMounts:
            - mountPath: /pds
              name: data
          ports:
            - name: http
              containerPort: {{ .Values.pds.containerPort }}
        {{- if .Values.pds.pdsadmin.enabled }}
        - image: {{ .Values.pds.pdsadmin.image }}
          name: pdsadmin
          command: ["sleep", "inf"]
          resources:
          {{- .Values.pds.pdsadmin.resources | toYaml | nindent 12 }}
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-pds-env"
          env:
            - name: PDS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.pds.secretsName | default (cat .Release.Name "-pds") }}"
                  key: adminPassword
            - name: PDS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.pds.secretsName | default (cat .Release.Name "-pds") }}"
                  key: jwtSecret
            - name: PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.pds.secretsName | default (cat .Release.Name "-pds") }}"
                  key: plcRotationKey
            # Just needs to be a dummy file which 1) exists, and 2) is harmless
            # to `source`.
            - name: PDS_ENV_FILE
              value: .profile
          volumeMounts:
            - mountPath: /pds
              name: data
            - mountPath: /home/utils/bin
              name: bin
        {{- end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-pds-data"
        {{- if .Values.pds.pdsadmin.enabled }}
        - name: bin
          configMap:
            name: "{{ .Release.Name }}-pds-bin"
            defaultMode: 0777
        {{ end }}
